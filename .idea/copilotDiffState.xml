<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/dao/DossierMedicalDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/dao/DossierMedicalDao.java" />
              <option name="updatedContent" value="package com.example.brif04_appteleexpertise_medicale.dao;&#10;&#10;import com.example.brif04_appteleexpertise_medicale.entity.DossierMedical;&#10;import com.example.brif04_appteleexpertise_medicale.util.JpaUtil;&#10;import jakarta.persistence.EntityManager;&#10;&#10;public class DossierMedicalDao {&#10;&#10;    // Méthode pour sauvegarder le dossier médical dans la base de données&#10;    public DossierMedical save(DossierMedical dossierMedical) {&#10;        EntityManager em = JpaUtil.getEntityManager();&#10;        &#10;        try {&#10;            em.getTransaction().begin();&#10;            &#10;            // Si l'ID est null, c'est une création (persist)&#10;            // Sinon c'est une modification (merge)&#10;            if (dossierMedical.getId() == null) {&#10;                em.persist(dossierMedical);&#10;            } else {&#10;                dossierMedical = em.merge(dossierMedical);&#10;            }&#10;            &#10;            em.getTransaction().commit();&#10;            return dossierMedical;&#10;            &#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw new RuntimeException(&quot;Erreur lors de la sauvegarde du dossier médical&quot;, e);&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    // Méthode pour récupérer le dossier médical par ID&#10;    public DossierMedical findById(Long id) {&#10;        EntityManager em = JpaUtil.getEntityManager();&#10;        &#10;        try {&#10;            return em.find(DossierMedical.class, id);&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    // Méthode pour mettre à jour le dossier médical&#10;    public DossierMedical update(DossierMedical dossierMedical) {&#10;        return save(dossierMedical);&#10;    }&#10;&#10;    // Méthode pour supprimer le dossier médical&#10;    public void delete(Long id) {&#10;        EntityManager em = JpaUtil.getEntityManager();&#10;        &#10;        try {&#10;            em.getTransaction().begin();&#10;            &#10;            DossierMedical dossierMedical = em.find(DossierMedical.class, id);&#10;            if (dossierMedical != null) {&#10;                em.remove(dossierMedical);&#10;            }&#10;            &#10;            em.getTransaction().commit();&#10;            &#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw new RuntimeException(&quot;Erreur lors de la suppression du dossier médical&quot;, e);&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/dao/SignesVitauxDao.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/dao/SignesVitauxDao.java" />
              <option name="updatedContent" value="package com.example.brif04_appteleexpertise_medicale.dao;&#10;&#10;import com.example.brif04_appteleexpertise_medicale.entity.SignesVitaux;&#10;import com.example.brif04_appteleexpertise_medicale.util.JpaUtil;&#10;import jakarta.persistence.EntityManager;&#10;&#10;public class SignesVitauxDao {&#10;&#10;    // Méthode pour sauvegarder les signes vitaux dans la base de données&#10;    public SignesVitaux save(SignesVitaux signesVitaux) {&#10;        EntityManager em = JpaUtil.getEntityManager();&#10;        &#10;        try {&#10;            em.getTransaction().begin();&#10;            &#10;            // Si l'ID est null, c'est une création (persist)&#10;            // Sinon c'est une modification (merge)&#10;            if (signesVitaux.getId() == null) {&#10;                em.persist(signesVitaux);&#10;            } else {&#10;                signesVitaux = em.merge(signesVitaux);&#10;            }&#10;            &#10;            em.getTransaction().commit();&#10;            return signesVitaux;&#10;            &#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw new RuntimeException(&quot;Erreur lors de la sauvegarde des signes vitaux&quot;, e);&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    // Méthode pour récupérer les signes vitaux par ID&#10;    public SignesVitaux findById(Long id) {&#10;        EntityManager em = JpaUtil.getEntityManager();&#10;        &#10;        try {&#10;            return em.find(SignesVitaux.class, id);&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    // Méthode pour supprimer les signes vitaux&#10;    public void delete(Long id) {&#10;        EntityManager em = JpaUtil.getEntityManager();&#10;        &#10;        try {&#10;            em.getTransaction().begin();&#10;            &#10;            SignesVitaux signesVitaux = em.find(SignesVitaux.class, id);&#10;            if (signesVitaux != null) {&#10;                em.remove(signesVitaux);&#10;            }&#10;            &#10;            em.getTransaction().commit();&#10;            &#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw new RuntimeException(&quot;Erreur lors de la suppression des signes vitaux&quot;, e);&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/entity/DossierMedical.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/entity/DossierMedical.java" />
              <option name="originalContent" value="package com.example.brif04_appteleexpertise_medicale.entity;&#10;&#10;&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;public class DossierMedical {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    private String antecedents;&#10;    private String allergies;&#10;    private String traitementEnCours;&#10;&#10;    @OneToOne(mappedBy = &quot;dossierMedical&quot;)&#10;    private Patient patient;&#10;&#10;    // Constructors&#10;    public DossierMedical() {}&#10;&#10;    public DossierMedical(Patient patient, String antecedents, String allergies, String traitementEnCours) {&#10;        this.patient = patient;&#10;        this.antecedents = antecedents;&#10;        this.allergies = allergies;&#10;        this.traitementEnCours = traitementEnCours;&#10;    }&#10;&#10;    // Getters &amp; Setters&#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;&#10;    public String getAntecedents() { return antecedents; }&#10;    public void setAntecedents(String antecedents) { this.antecedents = antecedents; }&#10;&#10;    public String getAllergies() { return allergies; }&#10;    public void setAllergies(String allergies) { this.allergies = allergies; }&#10;&#10;    public String getTraitementEnCours() { return traitementEnCours; }&#10;    public void setTraitementEnCours(String traitementEnCours) { this.traitementEnCours = traitementEnCours; }&#10;&#10;    public Patient getPatient() { return patient; }&#10;    public void setPatient(Patient patient) { this.patient = patient; }&#10;}" />
              <option name="updatedContent" value="package com.example.brif04_appteleexpertise_medicale.entity;&#10;&#10;&#10;import jakarta.persistence.*;&#10;&#10;@Entity&#10;public class DossierMedical {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    private String antecedents;&#10;    private String allergies;&#10;    private String traitementEnCours;&#10;&#10;    @OneToOne(mappedBy = &quot;dossierMedical&quot;)&#10;    private Patient patient;&#10;&#10;    // Constructors&#10;    public DossierMedical() {}&#10;&#10;    public DossierMedical(Patient patient, String antecedents, String allergies, String traitementEnCours) {&#10;        this.patient = patient;&#10;        this.antecedents = antecedents;&#10;        this.allergies = allergies;&#10;        this.traitementEnCours = traitementEnCours;&#10;    }&#10;&#10;    // Getters &amp; Setters&#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;&#10;    public String getAntecedents() { return antecedents; }&#10;    public void setAntecedents(String antecedents) { this.antecedents = antecedents; }&#10;&#10;    public String getAllergies() { return allergies; }&#10;    public void setAllergies(String allergies) { this.allergies = allergies; }&#10;&#10;    public String getTraitementEnCours() { return traitementEnCours; }&#10;    public void setTraitementEnCours(String traitementEnCours) { this.traitementEnCours = traitementEnCours; }&#10;&#10;    public Patient getPatient() { return patient; }&#10;    public void setPatient(Patient patient) { this.patient = patient; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/entity/SignesVitaux.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/entity/SignesVitaux.java" />
              <option name="originalContent" value="package com.example.brif04_appteleexpertise_medicale.entity;&#10;&#10;import jakarta.persistence.*;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;public class SignesVitaux {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @OneToOne(mappedBy = &quot;signesVitaux&quot;)&#10;    private Patient patient;&#10;&#10;    private LocalDateTime dateSaisie;&#10;    private String tension;&#10;    private Integer frequenceCardiaque;&#10;    private Double temperature;&#10;    private Integer frequenceRespiratoire;&#10;    private Double poids;&#10;    private Double taille;&#10;&#10;    protected SignesVitaux(){}&#10;    &#10;    public SignesVitaux(Patient patient, String tension, Integer frequenceCardiaque, Double temperature, Integer frequenceRespiratoire, Double poids, Double taille){&#10;        this.patient = patient;&#10;        this.dateSaisie = LocalDateTime.now();&#10;        this.tension = tension;&#10;        this.frequenceCardiaque = frequenceCardiaque;&#10;        this.temperature = temperature;&#10;        this.frequenceRespiratoire = frequenceRespiratoire;&#10;        this.poids = poids;&#10;        this.taille = taille;&#10;    }&#10;    &#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    public Patient getPatient() { return patient; }&#10;    public void setPatient(Patient patient) { this.patient = patient; }&#10;    public LocalDateTime getDateSaisie() { return dateSaisie; }&#10;    public void setDateSaisie(LocalDateTime dateSaisie) { this.dateSaisie = dateSaisie; }&#10;    public String getTension() { return tension; }&#10;    public void setTension(String tension) { this.tension = tension; }&#10;    public Integer getFrequenceCardiaque() { return frequenceCardiaque; }&#10;    public void setFrequenceCardiaque(Integer frequenceCardiaque) { this.frequenceCardiaque = frequenceCardiaque; }&#10;    public Double getTemperature() { return temperature; }&#10;    public void setTemperature(Double temperature) { this.temperature = temperature; }&#10;    public Integer getFrequenceRespiratoire() { return frequenceRespiratoire; }&#10;    public void setFrequenceRespiratoire(Integer frequenceRespiratoire) { this.frequenceRespiratoire = frequenceRespiratoire; }&#10;    public Double getPoids() { return poids; }&#10;    public void setPoids(Double poids) { this.poids = poids; }&#10;    public Double getTaille() { return taille; }&#10;    public void setTaille(Double taille) { this.taille = taille; }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.brif04_appteleexpertise_medicale.entity;&#10;&#10;import jakarta.persistence.*;&#10;import java.time.LocalDateTime;&#10;&#10;@Entity&#10;public class SignesVitaux {&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private Long id;&#10;&#10;    @OneToOne(mappedBy = &quot;signesVitaux&quot;)&#10;    private Patient patient;&#10;&#10;    private LocalDateTime dateSaisie;&#10;    private String tension;&#10;    private Integer frequenceCardiaque;&#10;    private Double temperature;&#10;    private Integer frequenceRespiratoire;&#10;    private Double poids;&#10;    private Double taille;&#10;&#10;    protected SignesVitaux(){}&#10;    &#10;    public SignesVitaux(Patient patient, String tension, Integer frequenceCardiaque, Double temperature, Integer frequenceRespiratoire, Double poids, Double taille){&#10;        this.patient = patient;&#10;        this.dateSaisie = LocalDateTime.now();&#10;        this.tension = tension;&#10;        this.frequenceCardiaque = frequenceCardiaque;&#10;        this.temperature = temperature;&#10;        this.frequenceRespiratoire = frequenceRespiratoire;&#10;        this.poids = poids;&#10;        this.taille = taille;&#10;    }&#10;    &#10;    public Long getId() { return id; }&#10;    public void setId(Long id) { this.id = id; }&#10;    public Patient getPatient() { return patient; }&#10;    public void setPatient(Patient patient) { this.patient = patient; }&#10;    public LocalDateTime getDateSaisie() { return dateSaisie; }&#10;    public void setDateSaisie(LocalDateTime dateSaisie) { this.dateSaisie = dateSaisie; }&#10;    public String getTension() { return tension; }&#10;    public void setTension(String tension) { this.tension = tension; }&#10;    public Integer getFrequenceCardiaque() { return frequenceCardiaque; }&#10;    public void setFrequenceCardiaque(Integer frequenceCardiaque) { this.frequenceCardiaque = frequenceCardiaque; }&#10;    public Double getTemperature() { return temperature; }&#10;    public void setTemperature(Double temperature) { this.temperature = temperature; }&#10;    public Integer getFrequenceRespiratoire() { return frequenceRespiratoire; }&#10;    public void setFrequenceRespiratoire(Integer frequenceRespiratoire) { this.frequenceRespiratoire = frequenceRespiratoire; }&#10;    public Double getPoids() { return poids; }&#10;    public void setPoids(Double poids) { this.poids = poids; }&#10;    public Double getTaille() { return taille; }&#10;    public void setTaille(Double taille) { this.taille = taille; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/service/PatientService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/service/PatientService.java" />
              <option name="originalContent" value="package com.example.brif04_appteleexpertise_medicale.service;&#10;&#10;import com.example.brif04_appteleexpertise_medicale.dao.PatientDao;&#10;import com.example.brif04_appteleexpertise_medicale.entity.DossierMedical;&#10;import com.example.brif04_appteleexpertise_medicale.entity.Infirmier;&#10;import com.example.brif04_appteleexpertise_medicale.entity.Patient;&#10;import com.example.brif04_appteleexpertise_medicale.entity.SignesVitaux;&#10;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;&#10;public class PatientService {&#10;&#10;    private final PatientDao patientDao = new PatientDao();&#10;    private final SignesVitauxService signesVitauxService = new SignesVitauxService();&#10;    private final DossierMedicalService dossierMedicalService = new DossierMedicalService();&#10;&#10;&#10;    public Patient creerPatient(String nom, String prenom, LocalDate dateNaissance,&#10;                               String numSecu, String adresse, String telephone,&#10;                               String mutuelle, Infirmier infirmier,&#10;                               String tensionArterielle, Integer frequenceCardiaque,&#10;                               Double temperature, Integer frequenceRespiratoire,&#10;                               Double poids, Double taille,&#10;                               String antecedents, String allergies, String traitements) {&#10;&#10;        Patient existant = patientDao.findByNumSecu(numSecu);&#10;        if (existant != null) {&#10;            throw new RuntimeException(&quot;Un patient avec ce numéro de sécurité sociale existe déjà&quot;);&#10;        }&#10;&#10;        Patient patient = new Patient();&#10;        patient.setNom(nom);&#10;        patient.setPrenom(prenom);&#10;        patient.setDateNaissance(dateNaissance);&#10;        patient.setNumSecu(numSecu);&#10;        patient.setAdresse(adresse);&#10;        patient.setTelephone(telephone);&#10;        patient.setMutuelle(mutuelle);&#10;        patient.setFileAttente(true);&#10;        patient.setInfirmier(infirmier);&#10;&#10;        if (tensionArterielle != null || frequenceCardiaque != null ||&#10;            temperature != null || frequenceRespiratoire != null ||&#10;            poids != null || taille != null) {&#10;&#10;            SignesVitaux signesVitaux = new SignesVitaux(patient, tensionArterielle,&#10;                frequenceCardiaque, temperature, frequenceRespiratoire, poids, taille);&#10;            patient.setSignesVitaux(signesVitaux);&#10;        }&#10;&#10;        if (antecedents != null || allergies != null || traitements != null) {&#10;            DossierMedical dossierMedical = new DossierMedical(patient, antecedents,&#10;                allergies, traitements);&#10;            patient.setDossierMedical(dossierMedical);&#10;        }&#10;&#10;        return patientDao.save(patient);&#10;    }&#10;&#10;&#10;    public List&lt;Patient&gt; getAllPatients() {&#10;        return patientDao.findAll();&#10;    }&#10;&#10;&#10;    public List&lt;Patient&gt; getPatientsEnAttente() {&#10;        return patientDao.findPatientsEnAttente();&#10;    }&#10;&#10;&#10;    public Patient getPatientById(Long id) {&#10;        return patientDao.findById(id);&#10;    }&#10;&#10;&#10;    public Patient getPatientByNumSecu(String numSecu) {&#10;        return patientDao.findByNumSecu(numSecu);&#10;    }&#10;&#10;&#10;    public Long countTotalPatients() {&#10;        return patientDao.countAll();&#10;    }&#10;&#10;&#10;    public Long countPatientsEnAttente() {&#10;        return patientDao.countPatientsEnAttente();&#10;    }&#10;&#10;    public Long countPatientsTraites() {&#10;        return patientDao.countPatientsTraites();&#10;    }&#10;&#10;    public Patient mettreEnFileAttente(Long patientId) {&#10;        Patient patient = patientDao.findById(patientId);&#10;        if (patient != null) {&#10;            patient.setFileAttente(true);&#10;            return patientDao.save(patient);&#10;        }&#10;        throw new RuntimeException(&quot;Patient introuvable&quot;);&#10;    }&#10;&#10;&#10;    public Patient retirerDeFileAttente(Long patientId) {&#10;        Patient patient = patientDao.findById(patientId);&#10;        if (patient != null) {&#10;            patient.setFileAttente(false);&#10;            return patientDao.save(patient);&#10;        }&#10;        throw new RuntimeException(&quot;Patient introuvable&quot;);&#10;    }&#10;&#10;    // Ajout: suppression d'un patient via le service&#10;    public void deletePatient(Long patientId) {&#10;        patientDao.delete(patientId);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.brif04_appteleexpertise_medicale.service;&#13;&#10;&#13;&#10;import com.example.brif04_appteleexpertise_medicale.dao.PatientDao;&#13;&#10;import com.example.brif04_appteleexpertise_medicale.entity.DossierMedical;&#13;&#10;import com.example.brif04_appteleexpertise_medicale.entity.Infirmier;&#13;&#10;import com.example.brif04_appteleexpertise_medicale.entity.Patient;&#13;&#10;import com.example.brif04_appteleexpertise_medicale.entity.SignesVitaux;&#13;&#10;&#13;&#10;import java.time.LocalDate;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;public class PatientService {&#13;&#10;&#13;&#10;    private final PatientDao patientDao = new PatientDao();&#13;&#10;    private final SignesVitauxService signesVitauxService = new SignesVitauxService();&#13;&#10;    private final DossierMedicalService dossierMedicalService = new DossierMedicalService();&#13;&#10;&#13;&#10;&#13;&#10;    public Patient creerPatient(String nom, String prenom, LocalDate dateNaissance,&#13;&#10;                               String numSecu, String adresse, String telephone,&#13;&#10;                               String mutuelle, Infirmier infirmier,&#13;&#10;                               String tensionArterielle, Integer frequenceCardiaque,&#13;&#10;                               Double temperature, Integer frequenceRespiratoire,&#13;&#10;                               Double poids, Double taille,&#13;&#10;                               String antecedents, String allergies, String traitements) {&#13;&#10;&#13;&#10;        Patient existant = patientDao.findByNumSecu(numSecu);&#13;&#10;        if (existant != null) {&#13;&#10;            throw new RuntimeException(&quot;Un patient avec ce numéro de sécurité sociale existe déjà&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        Patient patient = new Patient();&#13;&#10;        patient.setNom(nom);&#13;&#10;        patient.setPrenom(prenom);&#13;&#10;        patient.setDateNaissance(dateNaissance);&#13;&#10;        patient.setNumSecu(numSecu);&#13;&#10;        patient.setAdresse(adresse);&#13;&#10;        patient.setTelephone(telephone);&#13;&#10;        patient.setMutuelle(mutuelle);&#13;&#10;        patient.setFileAttente(true);&#13;&#10;        patient.setInfirmier(infirmier);&#13;&#10;&#13;&#10;        if (tensionArterielle != null || frequenceCardiaque != null ||&#13;&#10;            temperature != null || frequenceRespiratoire != null ||&#13;&#10;            poids != null || taille != null) {&#13;&#10;&#13;&#10;            SignesVitaux signesVitaux = new SignesVitaux(patient, tensionArterielle,&#13;&#10;                frequenceCardiaque, temperature, frequenceRespiratoire, poids, taille);&#13;&#10;            patient.setSignesVitaux(signesVitaux);&#13;&#10;        }&#13;&#10;&#13;&#10;        if (antecedents != null || allergies != null || traitements != null) {&#13;&#10;            DossierMedical dossierMedical = new DossierMedical(patient, antecedents,&#13;&#10;                allergies, traitements);&#13;&#10;            patient.setDossierMedical(dossierMedical);&#13;&#10;        }&#13;&#10;&#13;&#10;        return patientDao.save(patient);&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    public List&lt;Patient&gt; getAllPatients() {&#13;&#10;        return patientDao.findAll();&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    public List&lt;Patient&gt; getPatientsEnAttente() {&#13;&#10;        return patientDao.findPatientsEnAttente();&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    public Patient getPatientById(Long id) {&#13;&#10;        return patientDao.findById(id);&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    public Patient getPatientByNumSecu(String numSecu) {&#13;&#10;        return patientDao.findByNumSecu(numSecu);&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    public Long countTotalPatients() {&#13;&#10;        return patientDao.countAll();&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    public Long countPatientsEnAttente() {&#13;&#10;        return patientDao.countPatientsEnAttente();&#13;&#10;    }&#13;&#10;&#13;&#10;    public Long countPatientsTraites() {&#13;&#10;        return patientDao.countPatientsTraites();&#13;&#10;    }&#13;&#10;&#13;&#10;    public Patient mettreEnFileAttente(Long patientId) {&#13;&#10;        Patient patient = patientDao.findById(patientId);&#13;&#10;        if (patient != null) {&#13;&#10;            patient.setFileAttente(true);&#13;&#10;            return patientDao.save(patient);&#13;&#10;        }&#13;&#10;        throw new RuntimeException(&quot;Patient introuvable&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    public Patient retirerDeFileAttente(Long patientId) {&#13;&#10;        Patient patient = patientDao.findById(patientId);&#13;&#10;        if (patient != null) {&#13;&#10;            patient.setFileAttente(false);&#13;&#10;            return patientDao.save(patient);&#13;&#10;        }&#13;&#10;        throw new RuntimeException(&quot;Patient introuvable&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    // Ajout: suppression d'un patient via le service&#13;&#10;    public void deletePatient(Long patientId) {&#13;&#10;        patientDao.delete(patientId);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/servlet/AnnulerDemandeServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/servlet/AnnulerDemandeServlet.java" />
              <option name="updatedContent" value="package com.example.brif04_appteleexpertise_medicale.servlet;&#10;&#10;import com.example.brif04_appteleexpertise_medicale.entity.DemandeExpertise;&#10;import com.example.brif04_appteleexpertise_medicale.entity.MedecinSpecialiste;&#10;import com.example.brif04_appteleexpertise_medicale.entity.Utilisateur;&#10;import com.example.brif04_appteleexpertise_medicale.service.DemandeExpertiseService;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(&quot;/specialiste/annulerDemande&quot;)&#10;public class AnnulerDemandeServlet extends HttpServlet {&#10;&#10;    private final DemandeExpertiseService demandeService = new DemandeExpertiseService();&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        HttpSession session = request.getSession(false);&#10;        &#10;        // Vérifier l'authentification&#10;        if (session == null || session.getAttribute(&quot;utilisateur&quot;) == null) {&#10;            response.sendRedirect(request.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;&#10;        Utilisateur utilisateur = (Utilisateur) session.getAttribute(&quot;utilisateur&quot;);&#10;        if (!(utilisateur instanceof MedecinSpecialiste)) {&#10;            response.sendRedirect(request.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Récupérer l'ID de la demande&#10;            Long demandeId = Long.parseLong(request.getParameter(&quot;id&quot;));&#10;            &#10;            // Récupérer la demande&#10;            DemandeExpertise demande = demandeService.getDemandeById(demandeId);&#10;            &#10;            if (demande == null) {&#10;                session.setAttribute(&quot;errorMessage&quot;, &quot;❌ Demande introuvable&quot;);&#10;                response.sendRedirect(request.getContextPath() + &quot;/specialiste/dashboard&quot;);&#10;                return;&#10;            }&#10;&#10;            // Changer le status à ANNULEE&#10;            demande.setStatus(DemandeExpertise.Status.ANNULEE);&#10;            demandeService.updateDemande(demande);&#10;&#10;            // Message de succès&#10;            session.setAttribute(&quot;successMessage&quot;, &#10;                &quot;✅ Demande annulée avec succès pour le patient &quot; + &#10;                demande.getConsultation().getPatient().getNom());&#10;            &#10;        } catch (NumberFormatException e) {&#10;            session.setAttribute(&quot;errorMessage&quot;, &quot;❌ Erreur: ID invalide&quot;);&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            session.setAttribute(&quot;errorMessage&quot;, &quot;❌ Erreur : &quot; + e.getMessage());&#10;        }&#10;&#10;        response.sendRedirect(request.getContextPath() + &quot;/specialiste/dashboard&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/servlet/EXEMPLE_InfirmierServletToutEnUn.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/servlet/EXEMPLE_InfirmierServletToutEnUn.java" />
              <option name="updatedContent" value="package com.example.brif04_appteleexpertise_medicale.servlet;&#10;&#10;import com.example.brif04_appteleexpertise_medicale.entity.Infirmier;&#10;import com.example.brif04_appteleexpertise_medicale.entity.Patient;&#10;import com.example.brif04_appteleexpertise_medicale.entity.Utilisateur;&#10;import com.example.brif04_appteleexpertise_medicale.service.PatientService;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;&#10;import java.io.IOException;&#10;import java.time.LocalDate;&#10;import java.util.List;&#10;&#10;// ❌ MAUVAISE PRATIQUE - Tout dans une seule servlet&#10;@WebServlet(&quot;/infirmier/dashboard&quot;)&#10;public class InfirmierServletToutEnUn extends HttpServlet {&#10;    &#10;    private final PatientService patientService = new PatientService();&#10;    &#10;    // Afficher le dashboard&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) &#10;            throws ServletException, IOException {&#10;        &#10;        HttpSession session = request.getSession(false);&#10;        if (session == null || session.getAttribute(&quot;utilisateur&quot;) == null) {&#10;            response.sendRedirect(request.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;        &#10;        Utilisateur utilisateur = (Utilisateur) session.getAttribute(&quot;utilisateur&quot;);&#10;        if (!(utilisateur instanceof Infirmier)) {&#10;            response.sendRedirect(request.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;        &#10;        try {&#10;            // Récupérer les statistiques&#10;            Long totalPatients = patientService.countTotalPatients();&#10;            Long patientsEnAttente = patientService.countPatientsEnAttente();&#10;            Long patientsTraites = patientService.countPatientsTraites();&#10;            List&lt;Patient&gt; patients = patientService.getAllPatients();&#10;            &#10;            request.setAttribute(&quot;totalPatients&quot;, totalPatients);&#10;            request.setAttribute(&quot;patientsEnAttente&quot;, patientsEnAttente);&#10;            request.setAttribute(&quot;patientsTraites&quot;, patientsTraites);&#10;            request.setAttribute(&quot;patients&quot;, patients);&#10;            &#10;            request.getRequestDispatcher(&quot;/WEB-INF/views/infirmier/infirmier.jsp&quot;).forward(request, response);&#10;            &#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            request.setAttribute(&quot;errorMessage&quot;, &quot;Erreur : &quot; + e.getMessage());&#10;            request.getRequestDispatcher(&quot;/WEB-INF/views/infirmier/infirmier.jsp&quot;).forward(request, response);&#10;        }&#10;    }&#10;    &#10;    // Créer un patient&#10;    @Override&#10;    protected void doPost(HttpServletRequest request, HttpServletResponse response) &#10;            throws ServletException, IOException {&#10;        &#10;        HttpSession session = request.getSession(false);&#10;        if (session == null || session.getAttribute(&quot;utilisateur&quot;) == null) {&#10;            response.sendRedirect(request.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;        &#10;        Utilisateur utilisateur = (Utilisateur) session.getAttribute(&quot;utilisateur&quot;);&#10;        if (!(utilisateur instanceof Infirmier)) {&#10;            response.sendRedirect(request.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;        &#10;        Infirmier infirmier = (Infirmier) utilisateur;&#10;        &#10;        try {&#10;            // Récupérer toutes les données du formulaire (60+ lignes)&#10;            String nom = request.getParameter(&quot;nom&quot;);&#10;            String prenom = request.getParameter(&quot;prenom&quot;);&#10;            String dateNaissanceStr = request.getParameter(&quot;dateNaissance&quot;);&#10;            String numSecu = request.getParameter(&quot;numSecu&quot;);&#10;            String telephone = request.getParameter(&quot;telephone&quot;);&#10;            String adresse = request.getParameter(&quot;adresse&quot;);&#10;            String mutuelle = request.getParameter(&quot;mutuelle&quot;);&#10;            LocalDate dateNaissance = LocalDate.parse(dateNaissanceStr);&#10;            &#10;            String tensionArterielle = request.getParameter(&quot;tensionArterielle&quot;);&#10;            String frequenceCardiaqueStr = request.getParameter(&quot;frequenceCardiaque&quot;);&#10;            String temperatureStr = request.getParameter(&quot;temperature&quot;);&#10;            String frequenceRespiratoireStr = request.getParameter(&quot;frequenceRespiratoire&quot;);&#10;            String poidsStr = request.getParameter(&quot;poids&quot;);&#10;            String tailleStr = request.getParameter(&quot;taille&quot;);&#10;            &#10;            Integer frequenceCardiaque = (frequenceCardiaqueStr != null &amp;&amp; !frequenceCardiaqueStr.isEmpty()) &#10;                ? Integer.parseInt(frequenceCardiaqueStr) : null;&#10;            Double temperature = (temperatureStr != null &amp;&amp; !temperatureStr.isEmpty()) &#10;                ? Double.parseDouble(temperatureStr) : null;&#10;            Integer frequenceRespiratoire = (frequenceRespiratoireStr != null &amp;&amp; !frequenceRespiratoireStr.isEmpty()) &#10;                ? Integer.parseInt(frequenceRespiratoireStr) : null;&#10;            Double poids = (poidsStr != null &amp;&amp; !poidsStr.isEmpty()) &#10;                ? Double.parseDouble(poidsStr) : null;&#10;            Double taille = (tailleStr != null &amp;&amp; !tailleStr.isEmpty()) &#10;                ? Double.parseDouble(tailleStr) : null;&#10;            &#10;            String antecedents = request.getParameter(&quot;antecedents&quot;);&#10;            String allergies = request.getParameter(&quot;allergies&quot;);&#10;            String traitements = request.getParameter(&quot;traitements&quot;);&#10;            &#10;            // Créer le patient&#10;            Patient patient = patientService.creerPatient(&#10;                nom, prenom, dateNaissance, numSecu, adresse, telephone, mutuelle, infirmier,&#10;                tensionArterielle, frequenceCardiaque, temperature, frequenceRespiratoire, poids, taille,&#10;                antecedents, allergies, traitements&#10;            );&#10;            &#10;            session.setAttribute(&quot;successMessage&quot;, &quot;Patient ajouté avec succès !&quot;);&#10;            response.sendRedirect(request.getContextPath() + &quot;/infirmier/dashboard&quot;);&#10;            &#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            session.setAttribute(&quot;errorMessage&quot;, &quot;Erreur : &quot; + e.getMessage());&#10;            response.sendRedirect(request.getContextPath() + &quot;/infirmier/dashboard&quot;);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/servlet/PatientDeleteServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/servlet/PatientDeleteServlet.java" />
              <option name="updatedContent" value="// Ce fichier a été supprimé intentionnellement — la logique de suppression des patients&#10;// a été intégrée directement dans `PatientServlet` (mappée sur&#10;// &quot;/infirmier/ajouterPatient&quot; et &quot;/infirmier/supprimerPatient&quot;).&#10;//&#10;// J'ai laissé ce fichier vide (commentaire) pour ne pas ajouter de nouvelle&#10;// servlet active. Si vous voulez le supprimer physiquement, vous pouvez&#10;// l'enlever du projet depuis l'explorateur de fichiers.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/servlet/SoumettreAvisServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/servlet/SoumettreAvisServlet.java" />
              <option name="updatedContent" value="package com.example.brif04_appteleexpertise_medicale.servlet;&#10;&#10;import com.example.brif04_appteleexpertise_medicale.entity.DemandeExpertise;&#10;import com.example.brif04_appteleexpertise_medicale.entity.MedecinSpecialiste;&#10;import com.example.brif04_appteleexpertise_medicale.entity.Utilisateur;&#10;import com.example.brif04_appteleexpertise_medicale.service.DemandeExpertiseService;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(&quot;/specialiste/soumettreAvis&quot;)&#10;public class SoumettreAvisServlet extends HttpServlet {&#10;&#10;    private final DemandeExpertiseService demandeService = new DemandeExpertiseService();&#10;&#10;    @Override&#10;    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        HttpSession session = request.getSession(false);&#10;        &#10;        // Vérifier l'authentification&#10;        if (session == null || session.getAttribute(&quot;utilisateur&quot;) == null) {&#10;            response.sendRedirect(request.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;&#10;        Utilisateur utilisateur = (Utilisateur) session.getAttribute(&quot;utilisateur&quot;);&#10;        if (!(utilisateur instanceof MedecinSpecialiste)) {&#10;            response.sendRedirect(request.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Récupérer les données du formulaire&#10;            Long demandeId = Long.parseLong(request.getParameter(&quot;demandeId&quot;));&#10;            String avisMedecin = request.getParameter(&quot;avisMedecin&quot;);&#10;            String recommandations = request.getParameter(&quot;recommandations&quot;);&#10;&#10;            // Validation&#10;            if (avisMedecin == null || avisMedecin.trim().isEmpty()) {&#10;                session.setAttribute(&quot;errorMessage&quot;, &quot;❌ L'avis médical est obligatoire&quot;);&#10;                response.sendRedirect(request.getContextPath() + &quot;/specialiste/dashboard&quot;);&#10;                return;&#10;            }&#10;&#10;            // Récupérer la demande&#10;            DemandeExpertise demande = demandeService.getDemandeById(demandeId);&#10;            &#10;            if (demande == null) {&#10;                session.setAttribute(&quot;errorMessage&quot;, &quot;❌ Demande introuvable&quot;);&#10;                response.sendRedirect(request.getContextPath() + &quot;/specialiste/dashboard&quot;);&#10;                return;&#10;            }&#10;&#10;            // Mettre à jour la demande&#10;            demande.setAvisMedecin(avisMedecin);&#10;            demande.setRecommandations(recommandations);&#10;            demande.setStatus(DemandeExpertise.Status.TERMINEE);&#10;&#10;            // Sauvegarder&#10;            demandeService.updateDemande(demande);&#10;&#10;            // Message de succès&#10;            session.setAttribute(&quot;successMessage&quot;, &#10;                &quot;✅ Avis médical enregistré avec succès pour le patient &quot; + &#10;                demande.getConsultation().getPatient().getNom());&#10;            &#10;        } catch (NumberFormatException e) {&#10;            session.setAttribute(&quot;errorMessage&quot;, &quot;❌ Erreur: format invalide&quot;);&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            session.setAttribute(&quot;errorMessage&quot;, &quot;❌ Erreur : &quot; + e.getMessage());&#10;        }&#10;&#10;        response.sendRedirect(request.getContextPath() + &quot;/specialiste/dashboard&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/servlet/TraiterDemandeServlet.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/example/brif04_appteleexpertise_medicale/servlet/TraiterDemandeServlet.java" />
              <option name="updatedContent" value="package com.example.brif04_appteleexpertise_medicale.servlet;&#10;&#10;import com.example.brif04_appteleexpertise_medicale.entity.DemandeExpertise;&#10;import com.example.brif04_appteleexpertise_medicale.entity.MedecinSpecialiste;&#10;import com.example.brif04_appteleexpertise_medicale.entity.Utilisateur;&#10;import com.example.brif04_appteleexpertise_medicale.service.DemandeExpertiseService;&#10;import jakarta.servlet.ServletException;&#10;import jakarta.servlet.annotation.WebServlet;&#10;import jakarta.servlet.http.HttpServlet;&#10;import jakarta.servlet.http.HttpServletRequest;&#10;import jakarta.servlet.http.HttpServletResponse;&#10;import jakarta.servlet.http.HttpSession;&#10;&#10;import java.io.IOException;&#10;&#10;@WebServlet(&quot;/specialiste/traiterDemande&quot;)&#10;public class TraiterDemandeServlet extends HttpServlet {&#10;&#10;    private final DemandeExpertiseService demandeService = new DemandeExpertiseService();&#10;&#10;    @Override&#10;    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {&#10;        HttpSession session = request.getSession(false);&#10;        &#10;        // Vérifier l'authentification&#10;        if (session == null || session.getAttribute(&quot;utilisateur&quot;) == null) {&#10;            response.sendRedirect(request.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;&#10;        Utilisateur utilisateur = (Utilisateur) session.getAttribute(&quot;utilisateur&quot;);&#10;        if (!(utilisateur instanceof MedecinSpecialiste)) {&#10;            response.sendRedirect(request.getContextPath() + &quot;/login&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            // Récupérer l'ID de la demande&#10;            Long demandeId = Long.parseLong(request.getParameter(&quot;id&quot;));&#10;            &#10;            // Récupérer la demande&#10;            DemandeExpertise demande = demandeService.getDemandeById(demandeId);&#10;            &#10;            if (demande == null) {&#10;                session.setAttribute(&quot;errorMessage&quot;, &quot;❌ Demande introuvable&quot;);&#10;                response.sendRedirect(request.getContextPath() + &quot;/specialiste/dashboard&quot;);&#10;                return;&#10;            }&#10;&#10;            // Passer la demande au JSP&#10;            request.setAttribute(&quot;demande&quot;, demande);&#10;            request.getRequestDispatcher(&quot;/WEB-INF/views/specialiste/traiterDemande.jsp&quot;).forward(request, response);&#10;            &#10;        } catch (NumberFormatException e) {&#10;            session.setAttribute(&quot;errorMessage&quot;, &quot;❌ ID invalide&quot;);&#10;            response.sendRedirect(request.getContextPath() + &quot;/specialiste/dashboard&quot;);&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            session.setAttribute(&quot;errorMessage&quot;, &quot;❌ Erreur : &quot; + e.getMessage());&#10;            response.sendRedirect(request.getContextPath() + &quot;/specialiste/dashboard&quot;);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/webapp/WEB-INF/views/login.jsp">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/webapp/WEB-INF/views/login.jsp" />
              <option name="originalContent" value="&lt;%--&#10;  Created by IntelliJ IDEA.&#10;  User: LENOVO&#10;  Date: 14/10/2025&#10;  Time: 11:12&#10;  To change this template use File | Settings | File Templates.&#10;--%&gt;&#10;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Connexion - Télé-Expertise Médicale&lt;/title&gt;&#10;    &lt;style&gt;&#10;        * {&#10;            margin: 0;&#10;            padding: 0;&#10;            box-sizing: border-box;&#10;        }&#10;&#10;        body {&#10;            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;            min-height: 100vh;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            padding: 15px;&#10;        }&#10;&#10;        .container {&#10;            background: rgba(255, 255, 255, 0.95);&#10;            backdrop-filter: blur(10px);&#10;            border-radius: 20px;&#10;            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);&#10;            padding: 35px 40px;&#10;            width: 100%;&#10;            max-width: 420px;&#10;            animation: slideIn 0.5s ease-out;&#10;        }&#10;&#10;        @keyframes slideIn {&#10;            from {&#10;                opacity: 0;&#10;                transform: translateY(-20px);&#10;            }&#10;            to {&#10;                opacity: 1;&#10;                transform: translateY(0);&#10;            }&#10;        }&#10;&#10;        .header {&#10;            text-align: center;&#10;            margin-bottom: 30px;&#10;        }&#10;&#10;        .header h2 {&#10;            color: #667eea;&#10;            font-size: 1.8rem;&#10;            margin-bottom: 8px;&#10;            font-weight: 700;&#10;        }&#10;&#10;        .header p {&#10;            color: #666;&#10;            font-size: 0.9rem;&#10;        }&#10;&#10;        .form-group {&#10;            margin-bottom: 18px;&#10;        }&#10;&#10;        .form-group label {&#10;            display: block;&#10;            color: #333;&#10;            font-weight: 600;&#10;            margin-bottom: 8px;&#10;            font-size: 0.9rem;&#10;        }&#10;&#10;        .form-group input {&#10;            width: 100%;&#10;            padding: 14px 16px;&#10;            border: 2px solid #e0e0e0;&#10;            border-radius: 10px;&#10;            font-size: 1rem;&#10;            transition: all 0.3s ease;&#10;            background: #f8f9fa;&#10;        }&#10;&#10;        .form-group input:focus {&#10;            outline: none;&#10;            border-color: #667eea;&#10;            background: white;&#10;            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);&#10;        }&#10;&#10;        .form-group input::placeholder {&#10;            color: #999;&#10;        }&#10;&#10;        .forgot-password {&#10;            text-align: right;&#10;            margin-top: -10px;&#10;            margin-bottom: 20px;&#10;        }&#10;&#10;        .forgot-password a {&#10;            color: #667eea;&#10;            text-decoration: none;&#10;            font-size: 0.85rem;&#10;            font-weight: 500;&#10;            transition: color 0.3s ease;&#10;        }&#10;&#10;        .forgot-password a:hover {&#10;            color: #764ba2;&#10;            text-decoration: underline;&#10;        }&#10;&#10;        .btn-submit {&#10;            width: 100%;&#10;            padding: 15px;&#10;            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;            color: white;&#10;            border: none;&#10;            border-radius: 10px;&#10;            font-size: 1.1rem;&#10;            font-weight: 700;&#10;            cursor: pointer;&#10;            transition: all 0.3s ease;&#10;            margin-top: 10px;&#10;            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);&#10;        }&#10;&#10;        .btn-submit:hover {&#10;            transform: translateY(-2px);&#10;            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.5);&#10;        }&#10;&#10;        .btn-submit:active {&#10;            transform: translateY(0);&#10;        }&#10;&#10;        .footer-link {&#10;            text-align: center;&#10;            margin-top: 25px;&#10;            font-size: 0.9rem;&#10;            color: #666;&#10;        }&#10;&#10;        .footer-link a {&#10;            color: #667eea;&#10;            text-decoration: none;&#10;            font-weight: 600;&#10;            transition: color 0.3s ease;&#10;        }&#10;&#10;        .footer-link a:hover {&#10;            color: #764ba2;&#10;            text-decoration: underline;&#10;        }&#10;&#10;        .error-message {&#10;            background: #fee;&#10;            color: #c33;&#10;            padding: 12px;&#10;            border-radius: 8px;&#10;            margin-bottom: 20px;&#10;            font-size: 0.9rem;&#10;            border-left: 4px solid #c33;&#10;            animation: shake 0.3s ease;&#10;        }&#10;&#10;        @keyframes shake {&#10;            0%, 100% { transform: translateX(0); }&#10;            25% { transform: translateX(-5px); }&#10;            75% { transform: translateX(5px); }&#10;        }&#10;&#10;        .success-message {&#10;            background: #efe;&#10;            color: #3c3;&#10;            padding: 12px;&#10;            border-radius: 8px;&#10;            margin-bottom: 20px;&#10;            font-size: 0.9rem;&#10;            border-left: 4px solid #3c3;&#10;        }&#10;&#10;        .divider {&#10;            display: flex;&#10;            align-items: center;&#10;            text-align: center;&#10;            margin: 25px 0;&#10;            color: #999;&#10;            font-size: 0.85rem;&#10;        }&#10;&#10;        .divider::before,&#10;        .divider::after {&#10;            content: '';&#10;            flex: 1;&#10;            border-bottom: 1px solid #ddd;&#10;        }&#10;&#10;        .divider span {&#10;            padding: 0 10px;&#10;        }&#10;&#10;        /* Responsive */&#10;        @media (max-height: 650px) {&#10;            .container {&#10;                padding: 25px 35px;&#10;            }&#10;&#10;            .header h2 {&#10;                font-size: 1.5rem;&#10;            }&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;div class=&quot;header&quot;&gt;&#10;            &lt;h2&gt; Connexion&lt;/h2&gt;&#10;            &lt;p&gt;Accédez à votre espace professionnel&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Messages d'erreur ou de succès --&gt;&#10;        &lt;% if (request.getAttribute(&quot;error&quot;) != null) { %&gt;&#10;            &lt;div class=&quot;error-message&quot;&gt;&#10;                ❌ &lt;%= request.getAttribute(&quot;error&quot;) %&gt;&#10;            &lt;/div&gt;&#10;        &lt;% } %&gt;&#10;&#10;        &lt;% if (request.getAttribute(&quot;success&quot;) != null) { %&gt;&#10;            &lt;div class=&quot;success-message&quot;&gt;&#10;                ✅ &lt;%= request.getAttribute(&quot;success&quot;) %&gt;&#10;            &lt;/div&gt;&#10;        &lt;% } %&gt;&#10;&#10;        &lt;form action=&quot;${pageContext.request.contextPath}/login&quot; method=&quot;post&quot;&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;email&quot;&gt; Email&lt;/label&gt;&#10;                &lt;input type=&quot;email&quot;&#10;                       id=&quot;email&quot;&#10;                       name=&quot;email&quot;&#10;                       placeholder=&quot;Entrez votre email&quot;&#10;                       required&#10;                       value=&quot;&lt;%= request.getParameter(&quot;email&quot;) != null ? request.getParameter(&quot;email&quot;) : &quot;&quot; %&gt;&quot;&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;password&quot;&gt; Mot de passe&lt;/label&gt;&#10;                &lt;input type=&quot;password&quot;&#10;                       id=&quot;password&quot;&#10;                       name=&quot;password&quot;&#10;                       placeholder=&quot;Entrez votre mot de passe&quot;&#10;                       required&#10;                       minlength=&quot;8&quot;&gt;&#10;            &lt;/div&gt;&#10;&#10;&#10;&#10;            &lt;button type=&quot;submit&quot; class=&quot;btn-submit&quot;&gt;&#10;                 Se connecter&#10;            &lt;/button&gt;&#10;        &lt;/form&gt;&#10;&#10;        &lt;div class=&quot;divider&quot;&gt;&#10;            &lt;span&gt;OU&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;footer-link&quot;&gt;&#10;            Pas encore de compte ? &lt;a href=&quot;/register&quot;&gt;S'inscrire&lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;%--&#10;  Created by IntelliJ IDEA.&#10;  User: LENOVO&#10;  Date: 14/10/2025&#10;  Time: 11:12&#10;  To change this template use File | Settings | File Templates.&#10;--%&gt;&#10;&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;fr&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Connexion - Télé-Expertise Médicale&lt;/title&gt;&#10;    &lt;style&gt;&#10;        * {&#10;            margin: 0;&#10;            padding: 0;&#10;            box-sizing: border-box;&#10;        }&#10;&#10;        body {&#10;            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;&#10;            min-height: 100vh;&#10;            display: flex;&#10;            align-items: center;&#10;            justify-content: center;&#10;            padding: 15px;&#10;        }&#10;&#10;        .container {&#10;            background: rgba(255, 255, 255, 0.95);&#10;            backdrop-filter: blur(10px);&#10;            border-radius: 20px;&#10;            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.3);&#10;            padding: 35px 40px;&#10;            width: 100%;&#10;            max-width: 420px;&#10;            animation: slideIn 0.5s ease-out;&#10;        }&#10;&#10;        @keyframes slideIn {&#10;            from {&#10;                opacity: 0;&#10;                transform: translateY(-20px);&#10;            }&#10;            to {&#10;                opacity: 1;&#10;                transform: translateY(0);&#10;            }&#10;        }&#10;&#10;        .header {&#10;            text-align: center;&#10;            margin-bottom: 30px;&#10;        }&#10;&#10;        .header h2 {&#10;            color: #667eea;&#10;            font-size: 1.8rem;&#10;            margin-bottom: 8px;&#10;            font-weight: 700;&#10;        }&#10;&#10;        .header p {&#10;            color: #666;&#10;            font-size: 0.9rem;&#10;        }&#10;&#10;        .form-group {&#10;            margin-bottom: 18px;&#10;        }&#10;&#10;        .form-group label {&#10;            display: block;&#10;            color: #333;&#10;            font-weight: 600;&#10;            margin-bottom: 8px;&#10;            font-size: 0.9rem;&#10;        }&#10;&#10;        .form-group input {&#10;            width: 100%;&#10;            padding: 14px 16px;&#10;            border: 2px solid #e0e0e0;&#10;            border-radius: 10px;&#10;            font-size: 1rem;&#10;            transition: all 0.3s ease;&#10;            background: #f8f9fa;&#10;        }&#10;&#10;        .form-group input:focus {&#10;            outline: none;&#10;            border-color: #667eea;&#10;            background: white;&#10;            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);&#10;        }&#10;&#10;        .form-group input::placeholder {&#10;            color: #999;&#10;        }&#10;&#10;        .forgot-password {&#10;            text-align: right;&#10;            margin-top: -10px;&#10;            margin-bottom: 20px;&#10;        }&#10;&#10;        .forgot-password a {&#10;            color: #667eea;&#10;            text-decoration: none;&#10;            font-size: 0.85rem;&#10;            font-weight: 500;&#10;            transition: color 0.3s ease;&#10;        }&#10;&#10;        .forgot-password a:hover {&#10;            color: #764ba2;&#10;            text-decoration: underline;&#10;        }&#10;&#10;        .btn-submit {&#10;            width: 100%;&#10;            padding: 15px;&#10;            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;            color: white;&#10;            border: none;&#10;            border-radius: 10px;&#10;            font-size: 1.1rem;&#10;            font-weight: 700;&#10;            cursor: pointer;&#10;            transition: all 0.3s ease;&#10;            margin-top: 10px;&#10;            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);&#10;        }&#10;&#10;        .btn-submit:hover {&#10;            transform: translateY(-2px);&#10;            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.5);&#10;        }&#10;&#10;        .btn-submit:active {&#10;            transform: translateY(0);&#10;        }&#10;&#10;        .footer-link {&#10;            text-align: center;&#10;            margin-top: 25px;&#10;            font-size: 0.9rem;&#10;            color: #666;&#10;        }&#10;&#10;        .footer-link a {&#10;            color: #667eea;&#10;            text-decoration: none;&#10;            font-weight: 600;&#10;            transition: color 0.3s ease;&#10;        }&#10;&#10;        .footer-link a:hover {&#10;            color: #764ba2;&#10;            text-decoration: underline;&#10;        }&#10;&#10;        .error-message {&#10;            background: #fee;&#10;            color: #c33;&#10;            padding: 12px;&#10;            border-radius: 8px;&#10;            margin-bottom: 20px;&#10;            font-size: 0.9rem;&#10;            border-left: 4px solid #c33;&#10;            animation: shake 0.3s ease;&#10;        }&#10;&#10;        @keyframes shake {&#10;            0%, 100% { transform: translateX(0); }&#10;            25% { transform: translateX(-5px); }&#10;            75% { transform: translateX(5px); }&#10;        }&#10;&#10;        .success-message {&#10;            background: #efe;&#10;            color: #3c3;&#10;            padding: 12px;&#10;            border-radius: 8px;&#10;            margin-bottom: 20px;&#10;            font-size: 0.9rem;&#10;            border-left: 4px solid #3c3;&#10;        }&#10;&#10;        .divider {&#10;            display: flex;&#10;            align-items: center;&#10;            text-align: center;&#10;            margin: 25px 0;&#10;            color: #999;&#10;            font-size: 0.85rem;&#10;        }&#10;&#10;        .divider::before,&#10;        .divider::after {&#10;            content: '';&#10;            flex: 1;&#10;            border-bottom: 1px solid #ddd;&#10;        }&#10;&#10;        .divider span {&#10;            padding: 0 10px;&#10;        }&#10;&#10;        /* Responsive */&#10;        @media (max-height: 650px) {&#10;            .container {&#10;                padding: 25px 35px;&#10;            }&#10;&#10;            .header h2 {&#10;                font-size: 1.5rem;&#10;            }&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;div class=&quot;header&quot;&gt;&#10;            &lt;h2&gt; Connexion&lt;/h2&gt;&#10;            &lt;p&gt;Accédez à votre espace professionnel&lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- Messages d'erreur ou de succès --&gt;&#10;        &lt;% if (request.getAttribute(&quot;error&quot;) != null) { %&gt;&#10;            &lt;div class=&quot;error-message&quot;&gt;&#10;                ❌ &lt;%= request.getAttribute(&quot;error&quot;) %&gt;&#10;            &lt;/div&gt;&#10;        &lt;% } %&gt;&#10;&#10;        &lt;% if (request.getAttribute(&quot;success&quot;) != null) { %&gt;&#10;            &lt;div class=&quot;success-message&quot;&gt;&#10;                ✅ &lt;%= request.getAttribute(&quot;success&quot;) %&gt;&#10;            &lt;/div&gt;&#10;        &lt;% } %&gt;&#10;&#10;        &lt;form action=&quot;${pageContext.request.contextPath}/login&quot; method=&quot;post&quot;&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;email&quot;&gt; Email&lt;/label&gt;&#10;                &lt;input type=&quot;email&quot;&#10;                       id=&quot;email&quot;&#10;                       name=&quot;email&quot;&#10;                       placeholder=&quot;Entrez votre email&quot;&#10;                       required&#10;                       value=&quot;&lt;%= request.getParameter(&quot;email&quot;) != null ? request.getParameter(&quot;email&quot;) : &quot;&quot; %&gt;&quot;&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group&quot;&gt;&#10;                &lt;label for=&quot;password&quot;&gt; Mot de passe&lt;/label&gt;&#10;                &lt;input type=&quot;password&quot;&#10;                       id=&quot;password&quot;&#10;                       name=&quot;password&quot;&#10;                       placeholder=&quot;Entrez votre mot de passe&quot;&#10;                       required&#10;                       minlength=&quot;8&quot;&gt;&#10;            &lt;/div&gt;&#10;&#10;&#10;&#10;            &lt;button type=&quot;submit&quot; class=&quot;btn-submit&quot;&gt;&#10;                 Se connecter&#10;            &lt;/button&gt;&#10;        &lt;/form&gt;&#10;&#10;        &lt;div class=&quot;divider&quot;&gt;&#10;            &lt;span&gt;OU&lt;/span&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;footer-link&quot;&gt;&#10;            Pas encore de compte ? &lt;a href=&quot;${pageContext.request.contextPath}/register&quot;&gt;S'inscrire&lt;/a&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>